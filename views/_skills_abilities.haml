%h2 Skills &amp; Abilities
.section
  / %ul
  /   %li.nobreak
  /     %strong Title
  /     %div
  /       :maruku
  /         Explanation

  :maruku

    ## Functional Programming

    For several years, I've been applying the following FP techniques in all my programming, wherever appropriate: pure functions, immutability, map operation, monads (Some/None, Success/Failure), and separating data & behaviour.

    I've found FP techniques to greatly aid testability, and in the ability to reduce the context necessary to keep in mind when making code changes safely (the advanced typing in Elm is particularly brilliant for this).

    Elm is the only pure FP language I've done substantial work in; I'm very keen to expand my knowledge in the area of FP.

    ## Ruby

    I've been using Ruby as my primary programming language since 2011. Over that time, I've built a deep technical knowledge of the language, and its standard library, gems, tools, and techniques. At GreenSync, I was regarded as the go-to person for advice regarding Ruby techniques & issues.

    Rails is not my favourite framework. I find it overly obscures the flow of execution and data. And I think the merging of data and persistence that ActiveRecord encourages is unhelpful, resulting in slower unit tests from needlessly involving the database. I was instrumental in steering GreenSync in the direction of adopting dry-rb instead of Rails. Only one of their current codebases uses Rails; all others are based in dry-rb, Sequel, Que, and Sinatra.

    I prefer an application architecture organised by domain concept at the top level rather than by MVC layer. This makes the code easier to find, given it's far more frequent to need to work on multiple files of a concept, rather than multiple files of a layer. I brought this up with my colleagues at GreenSync, and we then arranged all of our codebases this way. I even created a crude tool, `renamespace`, to assist in renamespacing a class/file. >> [GitHub](https://github.com/ZimbiX/renamespace)

    The majority of my experience is in the realm of microservices and relatively small apps. I'd be very interested to explore what it's like to work in a (majestic) monolith, where it sounds like tools like Packwerk would come in handy to maintain order.

    ## Elm

    In Melbourne's first Covid lockdown, I taught myself the pure functional frontend programming language Elm, by recreating a game I've built a few times now. PathFinder is a multiplayer maze game based on a 1974 [board game](http://boardgamegeek.com/boardgame/2884/pathfinder) of the same name, most easily described as a maze version of Battleship. My game works well on desktop and supports multi-device or same-device multiplayer. I fell in love with Elm, and would like to write more Elm in future. >> [GitHub](https://github.com/ZimbiX/pathfinder-elm)

    ## React

    I've created and worked on several React apps, and found it immensely easier to develop in than vanilla JS / jQuery. Although most of my React experience is prior to their switch to the functional paradigm, I like the direction they've headed in.

    ## Docker

    At GreenSync, each app had its own Dockerised development environment; and Docker-based deployment (with Kubernetes). Docker is excellent to use for dev environments, streamlining the set-up process for working on GreenSync's many apps.

    I have a wealth of experience in optimising image build times of deployment Docker images to cache as much as possible, through careful layering, ordering, and context selection; and in Docker Compose setups.

    ## Continuous deployment with zero downtime

    Kubernetes makes zero downtime deployment (AKA blue-green deployment) of cloud-native apps really easy. I am intimately familiar with the expansion and contraction phases of deployment necessary to keep the database schema compatible with both the old and new versions of the app - which both need to be able to handle traffic simultaneously during the rollout. High uptime was critical for deX, as was the ability to reliably deploy many times per day.

    ## PostgreSQL

    GreenSync used PostgreSQL exclusively, and we made great use of its JSONB datatype. I am intimately familiar with querying PG and JSONB, and using the psql shell. I implemented several complex querying optimisations that resulted in significant financial cost reduction for DB hosing.

    When it came time to upgrade deX from PostgreSQL 9.6 due to its impending end-of-life, I designed, implemented, and executed, a custom upgrade process for deX that allowed mere minutes of downtime (and no data loss). This was far from a trivial outcome, given the restrictions of Google Cloud's hosted PostgreSQL product, which necessitated a full SQL dump and load of deX's hundreds of gigabytes.

    ## DevOps

    I was a key part of the deX team in its early days, where we successfully piloted many technologies, including Kubernetes, Terraform, Google Cloud, and Buildkite; these were all eventually rolled out company-wide.

    ## Close teamwork / pairing / thoughtful collaboration

    I'm very experienced in pair programming - GreenSync had an extremely strong pairing culture, with almost 100% of time spent pairing. Effective pairing (including thinking out loud, and knowing when it's ok to interrupt your pair) is easier said than done, and it took some effort to get good at.

    When a co-worker makes a suggestion (while pairing or otherwise), I always make sure to stop and carefully consider it, and discuss tradeoffs; only moving forward from such a discussion when all parties agree on an approach to try.

    ## Technical writing/communication

    I pride myself on my ability to explain technical concepts with precision and clarity. When writing Git commits, pull requests, and ADRs, this is very important for the current and future understanding of others working on a project.

    My colleague discovered a bug where some Que workers were sitting idle unncesessarily. We had a written discussion to understand the problem and potential solution. I [wrote an algorithm which solved the issue well](https://github.com/que-rb/que/pull/348), but it was necessarily complex, and so required a good deal of explanation; I provided this, along with a [visualisation of the algorithm](https://bit.ly/3YCiTMz) to aid understanding. (Although we then discussed whether a simpler approximation would be preferable, despite not being the perfect calculation; and in the end decided on the simpler option he proposed, for future ease of understandability). I see this as a great example of my skills in technical writing, collaboration, and open source.

    As a uni tutor for Computer Systems, I had a key role in my lab students' learning of logic circuits and ARM assembly programming. When providing help, I had to carefully balance the depth of my explanations to assist students' understanding, while also giving them room to learn by exploring the problems themselves.

    ## Remote/async work

    With my experience contributing to open source projects, I am very comfortable with working async, which was a required skill in switching to remote work due to Covid. Writing things down is great for having a historic record of conversations and decisions anyway - I love GitHub issues for this.

    When GreenSync switched to remote work, we needed a great remote pairing tool to maintain the vital pairing culture. With a third of the team using Linux, we required full cross-platform support. I volunteered to research and test appropriate tools, discovering Drovio (formerly USE Together), and Pop (formerly Screen); which both served us well.

    ## Event sourcing

    Event sourcing is a fundamental aspect of the design of deX. Having worked with the paradigm for several years, I am intimately familiar with it, and the different set of problems that arise as opposed to relational data. There are multiple interpretations of what 'event sourcing' means - to me it's that the eventually-consistent projected data can be (and occasonally is) completely and accurately rebuilt from the append-only eventlog of immutable events. We investigated existing event sourcing frameworks, but wanted to make different design tradeoffs, so opted to build our own; and learnt a lot about PostgreSQL in the process - e.g. pagination by cursor, performance degradation from relative stagnation of an event stream, and the pitfalls of reindexing a huge table.

    ## Automation

    I like creating scripts for tasks that are repetitive / error-prone. In my time at GreenSync, I developed strong Bash skills for this.

    ## Responsible FOSS use

    I am a strong proponent for the responsible use of Free and Open Source Software - that is, contributing information and bugfixes upstream wherever reasonably possible, for public benefit.

    The [Que](https://github.com/que-rb/que) job system gem is a core component of apps at GreenSync, and in the lead-up to Ruby 2's End Of Life, it still lacked Ruby 3 support. I was instrumental in the push to have GreenSync adopt the project, and then co-implemented such support - neither of which was a trivial task. I also co-implemented bulk job enqueueing, and have continued on as a Que maintainer since leaving GreenSync. Given the large size of the Que userbase (including Up Bank), this is probably my most impactful contribution to FOSS thus far.

/ %li
/   Ruby
/   %ul
/     %li.nobreak
/       :maruku
/         I was responsible for all Forticode web and Ruby development. I built a web demonstration of Forticode's Cipherise authentication technology, and turned this into an SDK for reuse in customer applications. For deployment, I set up Passenger on AWS Red Hat, and wrote a Heroku-esque Git hook for 'git push' deployment.
/    %li.nobreak
/      :maruku
/        In my work at Allori, I produced many software components, while maintaining Ruby idioms, conventions, and patterns. I worked on some Rails projects, but was mainly tasked with ones based around Sinatra and Middleman; I would very much like to expand my Rails experience.
/    %li.nobreak
/      :maruku
/        Over the 2014–2015 new year I worked on an implementation of the classic box movement puzzle, [Sokoban](http://en.wikipedia.org/wiki/Sokoban). The code is reasonably well covered by minitest specs. It currently uses an ASCII command-line interface, but I also plan to create a graphical alternative. >> [GitHub](https://github.com/ZimbiX/Sokoban)
/    %li
/      :maruku
/        I recently performed a conversion from a static website into a Sinatra application, leveraging HAML and Sass -- the result can be seen at [mosttrustedadvisers.com](http://mosttrustedadvisers.com/)
/    %li.nobreak
/      :maruku
/        At Allori, I was tasked with adding new functionality to a Rails [video course system](http://insights.connectingwithclients.com.au/); I implemented YouTube support, the ability to sync videos from more than one Vimeo account, and an improved course editing UI.
/     %li.nobreak
/       :maruku
/         Libraries & tools:

/         - Frontend/design: *React*, *jQuery*, *CoffeeScript*, *HAML/Slim*, *Sass*, *Cells*, *lodash*
/         - Frameworks: *Rails*, *Sinatra*, *Middleman*, *Trailblazer*
/         - Testing: *RSpec*
/         - Database/models: *PostgreSQL*, *ActiveRecord*
/         - Models: *dry-struct*
/         - Validation: *Reform*
/         - Documents: *Markdown*, *JSON*, *YAML*, *regular expressions*
/         - Debugging: *Pry*, *awesome_print*
/         - Tooling: *Rake*, *Guard*
/ %li.nobreak
/   C#
/   %ul
/     %li.nobreak
/       :maruku
/         At uni, I took the incredibly interesting concurrent programming unit, *Advanced .NET Programming* (since retitled *Concurrent Programming*). I implemented many concurrency utilities, which later allowed me to create solutions to the classical concurrency problems: Dining Philosophers, and Cigarette Smokers; and others like Hilzer's Barbershop, and River Crossing. >> [GitHub](https://github.com/ZimbiX/Concurrency)
/     %li.nobreak
/       :maruku
/         As my *Object-Oriented Programming* distinction project at uni, I created a version of my favourite board game, Khet ([khet.com](http://www.khet.com/)), most easily described as &lsquo;laser chess&rsquo;. The project demonstrates effective use of OO principles, and an application of the MVC design pattern. >> [GitHub](https://github.com/ZimbiX/Khet)
/ %li.nobreak
/   C++
/   %ul
/     %li
/       :maruku
/         In the course of taking the *Data Structures and Patterns* unit at uni, I created low-level classes for typical data structures like doubly-linked list, stack, queue, binary tree, n-ary tree; and implemented design patterns, including the iterator.
/ %li
/   GameMaker Language (GML)
/   %ul
/     %li
/       :maruku
/         I've been creating software since a young age -- I started making games with GameMaker in grade 5 (2004). My first version of PathFinder was developed in 2007.
/ %li
/   %strong Building computers
/   %ul
/     %li I have built many computers, including those for myself, friends, and tech help clients
/
  <li>
  <strong>Assisting people with computers</strong>
  <ul>
  <li>Often, I assist others with their technology. I</li>
  </ul>
  </li>
/ %li.nobreak
/   %strong Web development
/   %ul
/     %li I have worked on many websites, applying my skills in Ruby, PHP, HTML, CSS, and JavaScript; the preprocessed derivatives HAML, Sass, and CoffeeScript; and React.js
/     %li I have tested and fixed countless issues with rendering sites in Internet Explorer 6-9. BrowserStack's local testing feature has greatly simplified the cross-browser testing process
/ %li.nobreak
/   %strong Operating systems
/   %ul
/     %li I am an avid Linux user, using it as my primary OS on my main machine from January 2013, and on a home server that manages family photos, cloud backup, and a large media collection (streaming, indexing, and expanding). I started with Ubuntu, and moved onto Arch Linux after a couple of years
/     %li I have extensive experience in popular versions of Windows, and know how to troubleshoot and fix a huge range of issues &ndash; continually demonstrating this when I solve problems my tech help clients present to me
/
  <li>
  <strong>Video editing</strong>
  <ul>
  <li>With Adobe Premiere Pro, I have produced many hours of edited video in my time at Allori</li>
  </ul>
  </li>
/ %li.nobreak
/   %strong Communication
/   %ul
/     %li While providing assistance through my tech help business, I have been praised by many clients for my ability to readily explain complex concepts and procedures in a practical and easy to understand manner
/ %li.nobreak
/   %strong Solving interesting problems
/   %ul
/     %li Friends, family, and tech help clients often come to me to help troubleshoot their computers
/     %li I have provided support on the Google Drive forums, solving an obscure issue where the folder overlay icons would not appear
/ %li.nobreak
/   %strong Attention to detail &amp; user interface design
/   %ul
/     %li I have an eye for usability, and as a perfectionist, I am constantly thinking about ways to improve things. I can easily spot faults and inconsistencies in design and spelling/grammar which was of use during my testing work at Allori
/ %li.nobreak
/   %strong Exceeding quality expectations
/   %ul
/     %li I am a perfectionist, so most often I will exceed task requirements in an effort to produce something impressive, such as in my weekly programming exercises at uni, or my prize-winning database program in VCE IT
/ %li
/   %strong Offering innovative ideas
/   %ul
/     %li I occasionally come up with innovative ideas for technologies that would improve people's lives, but lack an outlet where I can spend the time to develop these
/ %li.nobreak
/   %strong Increasing efficiency
/   %ul
/     %li I am consistently improving the efficiency of my systems, such as writing macros and scripts for various tasks, or finding optimal software configurations. Linux architecture has helped greatly in this regard.
